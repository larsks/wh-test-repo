heat_template_version: 2013-05-23

parameters:

  server_image:
    type: string
    default: fedora-20-x86_64-updated
    description: glance image used to boot the server

  server_flavor:
    type: string
    default: m1.small
    description: flavor to use when booting the server

  external_network_id:
    type: string
    description: uuid of a network to use for floating ip addresses

  ssh_key_name:
    type: string
    description: name of ssh key to be provisioned on our server
    default: lars

  kube_master_ip:
    type: string
  fixed_network_id:
    type: string
  fixed_subnet_id:
    type: string
  external_network_id:
    type: string

resources:

  secgroup_all_open:
    type: "OS::Neutron::SecurityGroup"
    properties:
      rules:
        - protocol: icmp
        - protocol: tcp
        - protocol: udp

  kube_node:
    type: "OS::Nova::Server"
    properties:
      image:
        get_param: server_image
      flavor:
        get_param: server_flavor
      key_name:
        get_param: ssh_key_name
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/sh

            yum -y upgrade
            yum -y install jq dnf dnf-plugins-core
            dnf -y copr enable walters/atomic-next
            dnf -y copr enabled larsks/fakedocker

            sed -i 's/$releasever/21/g' /etc/yum.repos.d/_copr_walters-atomic-next.repo

            yum -y install kubernetes
            myhostname=$(ip route get $KUBE_MASTER_IP | awk '/src/ {print $5}')

            sed -i '/^KUBE_ETCD_SERVERS=/ s|=.*|=http://$KUBE_MASTER_IP:4001|' /etc/kubernetes/config
            sed -i '
              /^MINION_ADDRESS=/ s/=.*/="0.0.0.0"/
              /^MINION_HOSTNAME=/ s/=.*/="'"$myhostname"'"/
            ' /etc/kubernetes/kubelet

            sed -i '
              /^KUBE_API_ADDRESS=/ s/=.*/="$KUBE_MASTER_IP"/
              /^KUBE_MASTER=/ s/=.*/="$KUBE_MASTER_IP"/
            ' /etc/kubernetes/apiserver

            for service in docker.socket kubelet kube-proxy; do
              systemctl enable $service
              systemctl start $service
            done
          params:
            "$KUBE_MASTER_IP":
              get_param: kube_master_ip
      networks:
        - port:
            get_resource: kube_node_eth0

  kube_node_eth0:
    type: "OS::Neutron::Port"
    properties:
      network_id:
        get_param: fixed_network_id
      security_groups:
        - get_resource: secgroup_all_open
      fixed_ips:
        - subnet_id:
            get_param: fixed_subnet_id

outputs:

  kube_node_ip:
    value: {get_attr: [kube_node_eth0, fixed_ips, 0, ip_address]}

