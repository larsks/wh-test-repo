heat_template_version: 2013-05-23

parameters:

  server_image:
    type: string
    default: fedora-20-x86_64-updated
    description: glance image used to boot the server

  server_flavor:
    type: string
    default: m1.small
    description: flavor to use when booting the server

  external_network_id:
    type: string
    description: uuid of a network to use for floating ip addresses

  dns_nameserver:
    type: string
    description: address of a dns nameserver reachable in your environment
    default: 8.8.8.8

  ssh_key_name:
    type: string
    description: name of ssh key to be provisioned on our server
    default: lars

  number_of_minions:
    type: string
    description: how many kubernetes minions to spawn
    default: 2

resources:

  ######################################################################
  #
  # network resources.  allocate a network and router for our server.
  # it would also be possible to take advantage of existing network
  # resources (and have the deployer provide network and subnet ids,
  # etc, as parameters), but I wanted to minmize the amount of
  # configuration necessary to make this go.
  fixed_network:
    type: "OS::Neutron::Net"

  # This is the subnet on which we will deploy our server.
  fixed_subnet:
    type: "OS::Neutron::Subnet"
    properties:
      cidr: 10.0.0.0/24
      network_id:
        get_resource: fixed_network
      dns_nameservers:
        - get_param: dns_nameserver

  # create a router attached to the external network provided as a
  # parameter to this stack.
  extrouter:
    type: "OS::Neutron::Router"
    properties:
      external_gateway_info:
        network:
          get_param: external_network_id

  # attached fixed_subnet to our extrouter router.
  extrouter_inside:
    type: "OS::Neutron::RouterInterface"
    properties:
      router_id:
        get_resource: extrouter
      subnet_id:
        get_resource:
          fixed_subnet

  ######################################################################
  #
  # security groups.  we need to permit network traffic of various
  # sorts.
  #

  secgroup_all_open:
    type: "OS::Neutron::SecurityGroup"
    properties:
      rules:
        - protocol: icmp
        - protocol: tcp
        - protocol: udp

  ######################################################################
  #
  # databases server.  this sets up a MySQL server
  #
  kube_master:
    type: "OS::Nova::Server"
    depends_on:
      - extrouter_inside
    properties:
      image:
        get_param: server_image
      flavor:
        get_param: server_flavor
      key_name:
        get_param: ssh_key_name
      user_data_format: RAW
      user_data: |
        #!/bin/sh

        yum -y upgrade
        yum -y install jq dnf dnf-plugins-core
        dnf -y copr enable walters/atomic-next
        dnf -y copr enabled larsks/fakedocker

        sed -i 's/$releasever/21/g' /etc/yum.repos.d/_copr_walters-atomic-next.repo

        yum -y install kubernetes

        metadata=/etc/metadata.json
        curl -o $metadata -s http://169.254.169.254/openstack/latest/meta_data.json

        num_minions=$(
          jq .meta.kube_minions -r  < $metadata |
          jq 'length')

        minions=""
        for ((i=0; i<num_minions; i++)); do
          minion=$(
            jq .meta.kube_minions -r < $metadata |
            jq ".[$i]" -r)
          minions="${minions}${minions:+,}${minion}"
        done

        sed -i '
          /^KUBE_API_ADDRESS=/ s/=.*/="0.0.0.0"/
          /^MINION_ADDRESSES=/ s/=.*/="'"$minions"'"/
          /^MINION_HOSTNAME=/ s/=.*/="'"$myhostname"'"/
        ' /etc/kubernetes/apiserver

        for service in etcd kube-apiserver kube-scheduler kube-controller-manager; do
          systemctl enable $service
          systemctl start $service
        done

        cat > /root/apache.json <<EOF
        {
          "id": "apache",
          "desiredState": {
            "manifest": {
              "version": "v1beta1",
              "id": "apache-1",
              "containers": [{
                "name": "master",
                "image": "fedora/apache",
                "ports": [{
                  "containerPort": 80,
                  "hostPort": 80
                }]
              }]
            }
          },
          "labels": {
            "name": "apache"
          }
        }
        EOF
      metadata:
        kube_minions: {get_attr: [kube_minions, kube_node_ip]}
      networks:
        - port:
            get_resource: kube_master_eth0

  kube_master_eth0:
    type: "OS::Neutron::Port"
    properties:
      network_id:
        get_resource: fixed_network
      security_groups:
        - get_resource: secgroup_all_open
      fixed_ips:
        - subnet_id:
            get_resource: fixed_subnet

  kube_master_floating:
    type: "OS::Neutron::FloatingIP"
    depends_on:
      - extrouter_inside
    properties:
      floating_network_id:
        get_param: external_network_id
      port_id:
        get_resource: kube_master_eth0

  kube_minions:
    type: "OS::Heat::ResourceGroup"
    properties:
      count: {get_param: number_of_minions}
      resource_def:
        type: kubenode.yaml
        properties:
          external_network_id: {get_param: external_network_id}
          ssh_key_name: {get_param: ssh_key_name}
          server_image: {get_param: server_image}
          server_flavor: {get_param: server_flavor}
          fixed_network_id: {get_resource: fixed_network}
          fixed_subnet_id: {get_resource: fixed_subnet}
          kube_master_ip: {get_attr: [kube_master_eth0, fixed_ips, 0, ip_address]}

outputs:

  kube_master:
    value: {get_attr: [kube_master_floating, floating_ip_address]}

  kube_minions:
    value: {"Fn::Join": [", ", {get_attr: [kube_minions, kube_node_ip]}]}

